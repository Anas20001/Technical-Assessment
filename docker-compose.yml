services:
  # Kafka in KRaft mode (without Zookeeper)
  kafka:
    image: bitnami/kafka:3.5
    hostname: kafka
    container_name: kafka
    ports:
      - "9092:9094"
    environment:
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,EXTERNAL://:9094,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_KRAFT_CLUSTER_ID=MkU3OEVBNTcwNTJENDM2Qk
      - ALLOW_PLAINTEXT_LISTENER=yes
    volumes:
      - ./data/kafka:/bitnami/kafka
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9092 --list || exit 1"]
      interval: 5m
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      stream-network:
        aliases:
          - kafka

  # Kafka UI for monitoring
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
    networks:
      - stream-network
    restart: unless-stopped

  # ClickHouse
  clickhouse:
    image: clickhouse/clickhouse-server:23.8
    container_name: clickhouse
    ports:
      - "8123:8123"  # HTTP interface
      - "9000:9000"  # Native interface
    volumes:
      - ./data/clickhouse:/var/lib/clickhouse
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8123/ping"]
      interval: 5m
      timeout: 5s
      retries: 3
      start_period: 10s
    networks:
      stream-network:
        aliases:
          - clickhouse

  # ClickHouse client UI (Tabix)
  tabix:
    image: spoonest/clickhouse-tabix-web-client
    container_name: tabix
    depends_on:
      clickhouse:
        condition: service_healthy
    ports:
      - "8081:80"
    networks:
      - stream-network

  # Stream Processor for network telemetry
  streamprocessor:
    build:
      context: ./streamprocessor
      dockerfile: Dockerfile
    container_name: streamprocessor
    depends_on:
      kafka:
        condition: service_healthy
      clickhouse:
        condition: service_healthy
    env_file:
      - .env
    volumes:
      - ./logs:/app/logs
    networks:
      - stream-network
    restart: on-failure

networks:
  stream-network:
    driver: bridge 